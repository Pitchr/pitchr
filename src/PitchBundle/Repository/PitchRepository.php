<?php

namespace PitchBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use PitchBundle\Entity\Pitch;
use UserBundle\Entity\User;

/**
 * PitchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PitchRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User $user
     * @param Pitch $pitch
     * @return array
     */
    public function findMorePitchs(User $user, Pitch $pitch)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.user = :user')
            ->andWhere('p != :pitch')
            ->setParameter('user', $user)
            ->setParameter('pitch', $pitch)
            ->orderBy('p.createdAt', 'desc')
            ->setMaxResults(4);

        return $qb->getQuery()->getResult();
    }

    /**
     * Pagination
     *
     * @return array
     */
    public function findLastPitchs(){

        $qb = $this->createQueryBuilder('p')
            ->orderBy('p.createdAt','desc');

        return $qb->getQuery()->getResult();
    }

    /**
     * Pagination
     *
     * @param User $user
     * @return array
     */
    public function findLastPitchsByUser(User $user){

        $qb = $this->createQueryBuilder('p')
            ->where('p.user = :user')
            ->setParameter('user', $user)
            ->orderBy('p.createdAt','desc');

        return $qb->getQuery()->getResult();
    }

    /**
    * Filters the pitches according to limit, offset and sorts
    * @param array $query array("limit" => 10, "offset" => 0, "sort" => "-created_at")
    * @return array of results
    */
    public function filterPitchesByQuery(array $query) {
        $qb = $this->createQueryBuilder('p')->select('p.slug');
        if (!empty($query['sort'])) {
            if (!substr_compare($query['sort'],'-',0,1)) {
                $cutoff = substr($query['sort'],1);
                if (in_array($cutoff,$this->getClassMetadata()->getFieldNames()))
                  $qb->addOrderBy('p.'.substr($query['sort'],1),'DESC');
            }
            else {
                if (in_array($query['sort'],$this->getClassMetadata()->getFieldNames()))
                  $qb->addOrderBy('p.'.$query['sort'],'ASC');
            }
        }
        if (isset($query['limit'])) {
            $qb->setMaxResults($query['limit']);
        }
        if (isset($query['offset'])) {
            $qb->setFirstResult($query['offset']);
        }
        return array_map(function ($item) {
            return $item['slug'];
        },$qb->getQuery()->getResult());
    }
}
